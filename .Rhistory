install.packages(devtools)
install.packages("devtools")
install.packages("tidyverse")
library(readr)
packageVersion("renv")
setwd("~/")
setwd("~/Documents/Internship Red Cross/Github/ad-hoc-analysis")
setwd("~/Documents/Internship Red Cross/Github")
remotes::install_local("DEPAHRI")
setwd("~/Documents/Internship Red Cross/Github/ad-hoc-analysis")
setwd("~/Documents/Internship Red Cross/Github/ad-hoc-analysis/analysis/icb")
# DEPAHRI maps
library(tidyverse)
library(compositr)
library(DEPAHRI)
setwd("~/Documents/Internship Red Cross/Github/ad-hoc-analysis")
brc_colours <- list(
# Hero colour
red_dunant = "#ee2a24",
# Primary palette
white_clarity = "#ffffff",
black_shadow = "#1d1a1c",
black_full = "#000000",
# Hero colour - tones
red_earth = "#9d1f21",
red_deep = "#651713",
red_light = "#e95351",
red_mercer = "#d0011b",
# Secondary palette
green = "#40a22a",
green_dark = "#05853a",
blue = "#193351",
teal = "#287286",
sky = "#158aba",
steel = "#5a98c0",
duck = "#baddea",
white_flag = "#f6f6f6",
grey_fog = "#d7d8d7",
grey = "#5c747a",
earth = "#afa48f",
sand = "#e4d7aa",
mustard = "#f1b13b",
claret = "#7d1c23"
)
theme_brc_map <- function(...) {
# font <- "Helvetica Neue LT Pro"
font <- NULL
ggplot2::theme_minimal() +
ggplot2::theme(
text = ggplot2::element_text(family = font, color = brc_colours$black_shadow),
axis.line = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_line(color = "#ebebe5", size = 0.2),
panel.grid.minor = ggplot2::element_blank(),
plot.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
panel.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
legend.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
panel.border = ggplot2::element_blank(),
# Add labs elements
legend.title = ggplot2::element_text(size = 11),
legend.text = ggplot2::element_text(size = 9, hjust = 0),
plot.title = ggplot2::element_text(size = 15, hjust = 0.5),
plot.subtitle = ggplot2::element_text(
size = 10, hjust = 0.5,
margin = ggplot2::margin(
b = 0.2,
t = 0.2,
l = 2,
unit = "cm"
),
debug = F
),
# captions
plot.caption = ggplot2::element_text(
size = 7,
hjust = .5,
margin = ggplot2::margin(
t = 0.2,
b = 0,
unit = "cm"
),
color = brc_colours$black_shadow
),
...
)
}
theme_brc_map <- function(...) {
# font <- "Helvetica Neue LT Pro"
font <- NULL
ggplot2::theme_minimal() +
ggplot2::theme(
text = ggplot2::element_text(family = font, color = brc_colours$black_shadow),
axis.line = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_line(color = "#ebebe5", size = 0.2),
panel.grid.minor = ggplot2::element_blank(),
plot.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
panel.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
legend.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
panel.border = ggplot2::element_blank(),
# Add labs elements
legend.title = ggplot2::element_text(size = 11),
legend.text = ggplot2::element_text(size = 9, hjust = 0),
plot.title = ggplot2::element_text(size = 15, hjust = 0.5),
plot.subtitle = ggplot2::element_text(
size = 10, hjust = 0.5,
margin = ggplot2::margin(
b = 0.2,
t = 0.2,
l = 2,
unit = "cm"
),
debug = F
),
# captions
plot.caption = ggplot2::element_text(
size = 7,
hjust = .5,
margin = ggplot2::margin(
t = 0.2,
b = 0,
unit = "cm"
),
color = brc_colours$black_shadow
),
...
)
}
# Appendix
theme_brc_map <- function(...) {
# font <- "Helvetica Neue LT Pro"
font <- NULL
ggplot2::theme_minimal() +
ggplot2::theme(
text = ggplot2::element_text(family = font, color = brc_colours$black_shadow),
axis.line = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_line(color = "#ebebe5", size = 0.2),
panel.grid.minor = ggplot2::element_blank(),
plot.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
panel.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
legend.background = ggplot2::element_rect(fill = "#ffffff", color = NA),
panel.border = ggplot2::element_blank(),
# Add labs elements
legend.title = ggplot2::element_text(size = 11),
legend.text = ggplot2::element_text(size = 9, hjust = 0),
plot.title = ggplot2::element_text(size = 15, hjust = 0.5),
plot.subtitle = ggplot2::element_text(
size = 10, hjust = 0.5,
margin = ggplot2::margin(
b = 0.2,
t = 0.2,
l = 2,
unit = "cm"
),
debug = F
),
# captions
plot.caption = ggplot2::element_text(
size = 7,
hjust = .5,
margin = ggplot2::margin(
t = 0.2,
b = 0,
unit = "cm"
),
color = brc_colours$black_shadow
),
...
)
}
brc_colours <- list(
# Hero colour
red_dunant = "#ee2a24",
# Primary palette
white_clarity = "#ffffff",
black_shadow = "#1d1a1c",
black_full = "#000000",
# Hero colour - tones
red_earth = "#9d1f21",
red_deep = "#651713",
red_light = "#e95351",
red_mercer = "#d0011b",
# Secondary palette
green = "#40a22a",
green_dark = "#05853a",
blue = "#193351",
teal = "#287286",
sky = "#158aba",
steel = "#5a98c0",
duck = "#baddea",
white_flag = "#f6f6f6",
grey_fog = "#d7d8d7",
grey = "#5c747a",
earth = "#afa48f",
sand = "#e4d7aa",
mustard = "#f1b13b",
claret = "#7d1c23"
)
?rbind
# Prepare data ----
depahriUK <-
rbind(england_lsoa_depahri, wales_lsoa_depahri, scotland_lsoa_depahri)
View(depahriUK)
# Prepare data ----
depahriUK <-
rbind(england_lsoa_depahri, wales_lsoa_depahri, scotland_lsoa_depahri) |>
filter(lsoa11_code, depahri_score_national)
# Setup ----
library(tidyverse)
View(depahriUK)
# Prepare data ----
depahriUK <-
rbind(england_lsoa_depahri, wales_lsoa_depahri, scotland_lsoa_depahri) |>
select(lsoa11_code, depahri_score_national)
# Prepare data ----
depahriUK <-
rbind(england_lsoa_depahri, wales_lsoa_depahri, scotland_lsoa_depahri) |>
select(lsoa11_code, depahri_score_national) |>
mutate(
depahri_quintile = compositr::quantise(score_scotland, num_quantiles = 5),
is_worst_score = ifelse(depahri_quintile == 5, 1, 0)
)
setwd("~/Documents/Internship Red Cross/Github")
setwd("~/Documents/Internship Red Cross/Github/ad-hoc-analysis/analysis/icb")
library(tidyverse)
library(compositr)
library(DEPAHRI)
# Setup ----
# Small geography to health
england_icb_lsoa <-
geographr::lookup_lsoa11_sicbl22_icb22_ltla22 |>
select(icb22_name, icb22_code, lsoa11_code)
wales_lhb_lsoa <-
geographr::lookup_lsoa11_ltla21 |>
filter(str_detect(lsoa11_code, "^W")) |>
left_join(geographr::lookup_ltla21_lhb22) |>
select(lsoa11_code, lhb22_code, lhb22_name)
scotland_hb_dz <-
geographr::lookup_dz11_ltla19_hb19 |>
left_join(geographr::names_codes_hb19) |>
select(dz11_code, hb19_code, hb19_name)
library(geographr)
# Names & Codes of small geographies
names_codes_lsoa11 <-
geographr::boundaries_lsoa11 |>
sf::st_drop_geometry()
names_codes_dz11 <-
geographr::boundaries_dz11 |>
sf::st_drop_geometry()
# Recognisable names for datasets
msoa11_names <- read_csv("https://houseofcommonslibrary.github.io/msoanames/MSOA-Names-Latest.csv") |> select(msoa11_code = msoa11cd, msoa11_recognisable_name = msoa11hclnm)
msoa21_names <- read_csv("https://houseofcommonslibrary.github.io/msoanames/MSOA-Names-Latest2.csv") |> select(msoa21_code = msoa21cd, msoa21_recognisable_name = msoa21hclnm)
lsoa11_msoa11_names <-
geographr::lookup_lsoa11_msoa11 |>
left_join(msoa11_names) |>
select(lsoa11_code, msoa11_recognisable_name)
# Health admin geographies lists for mapping
icb_list <- geographr::boundaries_icb22 |>
sf::st_drop_geometry()
lhb_list <- geographr::boundaries_lhb20 |>
sf::st_drop_geometry()
hb_list <- geographr::boundaries_hb19 |>
sf::st_drop_geometry()
# Prep datasets ----
england_depahri <-
england_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)
wales_depahri <-
wales_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)
scotland_depahri <-
scotland_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)
# Prep datasets ----
england_depahri <-
england_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)
wales_depahri <-
wales_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)
scotland_depahri <-
scotland_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)
View(england_depahri)
# Prep datasets ----
# Higher values = high risk
england_depahri <-
england_lsoa_depahri |>
select(lsoa11_code, depahri_score_national) |>
mutate(
depahri_quantile = compositr::quantise(depahri_score_national, num_quantiles = 5),
is_worst_depahri_quantile = ifelse(depahri_quantile == 5, 1, 0),
)
View(england_depahri)
# Prep datasets ----
# Higher values = high risk
england_depahri <-
england_lsoa_depahri |>
select(lsoa11_code, depahri_score_national) |>
mutate(
depahri_quantile = compositr::quantise(depahri_score_national, num_quantiles = 5),
is_worst_depahri_quantile = ifelse(depahri_quantile == 5, 1, 0),
)|>
left_join(lsoa11_msoa11_names)
View(england_depahri)
scotland_depahri <-
scotland_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)|>
mutate(
depahri_quantile = compositr::quantise(depahri_score_national, num_quantiles = 5),
is_worst_depahri_quantile = ifelse(depahri_quantile == 5, 1, 0),
)|>
left_join(names_codes_dz11) |>
# Remove the final part of dz11_name (a hyphen and some numbers)
mutate(dz11_name = str_remove(dz11_name, "\\s\\-\\s[0-9]+"))
View(scotland_depahri)
scotland_depahri <-
scotland_lsoa_depahri |>
select(lsoa11_code, depahri_score_national)|>
mutate(
depahri_quantile = compositr::quantise(depahri_score_national, num_quantiles = 5),
is_worst_depahri_quantile = ifelse(depahri_quantile == 5, 1, 0),
)|>
left_join(names_codes_dz11, by = c("lsoa11_code" = "dz11_code")) |>
# Remove the final part of dz11_name (a hyphen and some numbers)
mutate(dz11_name = str_remove(dz11_name, "\\s\\-\\s[0-9]+"))
View(scotland_depahri)
icb_code = "E54000011"
icb_name <-
icb_list |>
filter(icb22_code == icb_code) |>
pull(icb22_name)
current_icb <-
england_depahri |>
filter(icb22_code == icb_code)
View(england_icb_lsoa)
View(england_depahri)
setwd("~/")
knitr::opts_chunk$set(include = FALSE)
rd_model <- RDestimate(share_detained_sheriff ~ running_var, data = sheriff)
knitr::opts_chunk$set(include = FALSE)
load("data/2023essay_q1.Rda")
# ---- i) ----
library(lmtest)
library(multiwayvcov)
g$munid <- factor(g$munid)
first_stage <- lm(data = g, treatment ~ logdistance)
coeftest(first_stage, cluster.vcov(first_stage, g$munid))
# ---- ii) ----
waldtest(first_stage, vcov=cluster.vcov(first_stage, g$munid))
# Predicted treatment values
g$fitted_first <- fitted.values(first_stage)
second_stage_asylum <- lm(
score_asylum ~ fitted_first,
data=g
)
coeftest(second_stage_asylum, cluster.vcov(second_stage_asylum, g$munid))
second_stage_immig <- lm(
score_immig ~ fitted_first,
data=g
)
coeftest(second_stage_immig, cluster.vcov(second_stage_immig, g$munid))
# Proportion of compliers (first-stage)
prop_compliers <- lm(treatment ~ low_distance, data = g)
summary(prop_compliers)
# Intent-to-treat effect (Reduced Form Estimate)
itt <- lm(score_asylum ~ low_distance, data = g)
summary(itt)
# Complier Average Causal Effect (Local Average Treatment Effect)
cace <- coef(itt)[2] / coef(prop_compliers)[2]
cace
library(AER)
summary(ivreg(score_asylum ~ treatment | low_distance, data = g))
library(rdd)
library(fixest)
load("data/2023essay_q2.Rda")
DCdensity(sheriff$running_var, verbose =T)
rd_model <- RDestimate(share_detained_sheriff ~ running_var, data = sheriff)
summary(rd_model)
estimates <- c()
CI_up <- c()
CI_down <- c()
bandwidths <- seq(from = 2, to = 10, by = 1)
for(i in 1:length(bandwidths)){
rd <- RDestimate(
share_detained_sheriff ~ running_var, bw=bandwidths[i], data = sheriff
)
estimates[i] <- rd$est[1]
CI_up[i] <- estimates[i] + 1.96 * rd$se[1]
CI_down[i] <- estimates[i] -1.96 * rd$se[1]
}
plot(estimates,
type="l",
lwd=2,
ylim=c(-0.4,0.4),
xaxt="n",
xlab="Bandwidth",
ylab="Estimate")
abline(h=0)
lines(CI_up,
lty=3)
lines(CI_down,
lty=3)
axis(1,
at=c(1,3,5,7,9),
labels=c(2,4,6,8,10))
legend("topright", c("RD Estimate","95% Confidence Interval"), lty=c(1,3))
CI_down
setwd("~/Documents/UCL/Year 3/Social_Networks_SOCS0081/Practicals_SOCS0081")
